library(dplyr)
library(RCurl)
library(dotenv)
source("credentials.R")
API_KEY <- "I9DhFzOgWkwhDhMkgmNqiOG35"
API_SECRET <- "Gyc7D22NN03mp277exmWUoVf6n7IUNTbRgZXHdpclOGVAuiVTP"
access_token <-	"68071383-ssY0YbVrGWfKkD6X8WcZC64QzbbjVWQkaAgPdIKkk"
access_token_secret <- "clLBn9zKLsPcvmO20njZHyZvksJaJ92BHZ3PH22EGeJTF"
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
tweets.df = do.call("rbind",lapply(tweets,as.data.frame))
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
tweets.df$q <- with(tweets.df, cut(created, 4))
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), color=q, type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
library(devtools)
library(plotly)
library(twitteR)
load("my_oauth.Rdata")
setwd("~/Documents/UW classes/info498/INFO498_final_project")
load("my_oauth.Rdata")
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
tweets.df = do.call("rbind",lapply(tweets,as.data.frame))
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0, oauth = my_oauth)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0, oauth = my_oauth)
getTwitterOAuth(my_oauth$consumerKey, my_oauth$consumerSecret)
library(streamR)
library(twitteR)
source("scripts/tags.R")
source("scripts/tags_historical.R")
source("scripts/credentials.R")
collect_tweets <- function(tags) {
filterStream(file.name = "tweets.json",
track = tags,
language = "en",
timeout = 10,
oauth = my_oauth)
tweets_df <- parseTweets("tweets.json", simplify = FALSE)
return(tweets_df)
}
source("scripts/credentials.R")
setwd("~/Documents/UW classes/info498/INFO498_final_project")
source("scripts/tags.R")
load("my_oauth.Rdata")
collect_tweets <- function(tags) {
filterStream(file.name = "tweets.json",
track = tags,
language = "en",
timeout = 10,
oauth = my_oauth)
tweets_df <- parseTweets("tweets.json", simplify = FALSE)
return(tweets_df)
}
collect_tweets(TAGS_HILLARY)
collect_tweets(TAGS_HILLARY)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
?get_oauth_sig()
library(ROAuth)
source("scripts/credentials.R")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- API_KEY
consumerSecret <- API_SECRET
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
load("my_oauth.Rdata")
setup_twitter_oauth(my_oauth$sonsumerKey, my_oauth$consumerSecret)
setup_twitter_oauth(my_oauth$consumerKey, my_oauth$consumerSecret)
install.packages('mapproj')
library(ggmap)
library(mapproj)
map <- get_map(location = 'europe',zoom =4, maptype ='terrain')
ggmap(map)
?get_map
map <- get_map(location = 'europe',zoom =4, maptype ='hybrid')
ggmap(map)
library(streamR)
library(twitteR)
source("scripts/tags.R")
load("my_oauth.Rdata")
collect_tweets <- function(tags) {
filterStream(file.name = "tweets.json",
track = tags,
language = "en",
timeout = 10,
oauth = my_oauth)
tweets_df <- parseTweets("tweets.json", simplify = FALSE)
return(tweets_df)
}
tweets <- collect_tweets(TAGS_HILLARY)
View(tweets)
View(TAGS_HILLARY)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
tweets$q <- with(tweets, cut(created, 4))
plot_ly(tweets, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), color=q, type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
tweets <- filter(tweets, geo_enabled %in% 'TRUE')
library(dplyr)
tweets <- filter(tweets, geo_enabled %in% 'TRUE')
View(tweets)
library(devtools)
library(plotly)
library(twitteR)
library(streamR)
library(dplyr)
source("scripts/tags.R")
load("my_oauth.Rdata")
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
setup_twitter_oauth(my_oauth$consumerKey, my_oauth$consumerSecret, my_oauth$oauthKey, my_oauth$oauthSecret)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
setup_twitter_oauth(my_oauth$consumerKey, my_oauth$consumerSecret, my_oauth$oauthKey, my_oauth$oauthSecret)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
x <- getURL("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df <- read.csv(text = x)
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
View(df)
setwd("~/Documents/UW classes/info498")
setwd("~/Documents/UW classes/info498/INFO498_FINAL_PROJECT")
library(devtools)
library(plotly)
library(twitteR)
library(streamR)
library(dplyr)
source("scripts/tags.R")
load("my_oauth.Rdata")
setup_twitter_oauth(my_oauth$consumerKey, my_oauth$consumerSecret, my_oauth$oauthKey, my_oauth$oauthSecret)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
tweets.df = do.call("rbind",lapply(tweets,as.data.frame))
View(tweets.df)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
tweets.df$q <- with(tweets.df, cut(created, 4))
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), color=q, type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
tweets.df$q <- with(tweets.df, cut(created, 4))
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
twitterMap <- function(searchtext,locations,radius){
require(ggplot2)
require(maps)
require(twitteR)
#radius from randomly chosen location
radius=radius
lat<-runif(n=locations,min=24.446667, max=49.384472)
long<-runif(n=locations,min=-124.733056, max=-66.949778)
#generate data fram with random longitude, latitude and chosen radius
coordinates<-as.data.frame(cbind(lat,long,radius))
coordinates$lat<-lat
coordinates$long<-long
#create a string of the lat, long, and radius for entry into searchTwitter()
for(i in 1:length(coordinates$lat)){
coordinates$search.twitter.entry[i]<-toString(c(coordinates$lat[i],
coordinates$long[i],radius))
}
# take out spaces in the string
coordinates$search.twitter.entry<-gsub(" ","", coordinates$search.twitter.entry ,
fixed=TRUE)
#Search twitter at each location, check how many tweets and put into dataframe
for(i in 1:length(coordinates$lat)){
coordinates$number.of.tweets[i]<-
length(searchTwitter(searchString=searchtext,n=1000,geocode=coordinates$search.twitter.entry[i]))
}
#making the US map
all_states <- map_data("state")
#plot all points on the map
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="grey",     fill=NA )
p<-p + geom_point( data=coordinates, aes(x=long, y=lat,color=number.of.tweets
)) + scale_size(name="# of tweets")
p
}
twitterMap('trump', 50, '2mi')
twitterMap('trump', 50, '2mi')
searchTwitter('election+2016', n=50, lang='en')
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
tweets.df = do.call("rbind",lapply(tweets,as.data.frame))
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
View(tweets.df)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
lakecolor = toRGB("white")
)
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, type = 'choropleth') %>% layout(geo=g)
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode = 'markers',
marker = list(line = list(color = toRGB("white"), width = 2)), type = 'choropleth')
%>% layout(geo=g)
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
library(shiny)
source('tags.R')
setwd("~/Documents/UW classes/info498/INFO498_final_project")
library(shiny)
library(plotly)
source('tags.R')
source('scripts/tags.R')
TAGS_BERNIE[1]
?searchTwitter
View(TAGS_BERNIE)
View(TAGS_BERNIE[1])
shiny::runApp('scripts')
?searchTwitter
shiny::runApp('scripts')
