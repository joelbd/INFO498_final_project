barplot(cars)
hist(cars$speed)
hist(cars$speed,breaks=10)
hist(cars$speed,breaks=30)
data(mtcars)
?data(mtcars)
data(mtcars)
mtcars
summary(mpg)
summary(mtcars$mpg)
x<-4
x<-4
x<-c(20,6,4,2,1,2,1,0,0,4)
mean(x)
mean
y<-mean(x)
var(x)
y<-x/
y<-x/6
y=x/6
var(y)
var((x-4)/6)
var(x/6)
?var
35.3/25
35.3/34
35.3/36
var(x)/36
x*3
var(x*3)
var(x)*81
35.3*9
x<-c(20,6,5,3,1,2,1,0,16,10)
r(x)
r(x)
r
?r
r<-c(10,8,7,5,2,4,2,1,9,6)
x<-c(20,6,5,3,1,2,1,0,16,4)
?rank
rank(x)
A<-c(1,2,3,4,5,6)
B<-c(2.2,5.5,5.2,3.1,4.3,1.6)
C<-c(50,43,59,46,46,62)
plot(B,C)
A<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
B<-c(2.2,5.5,5.2,3.1,4.3,1.6,5.6,3.4,4.8,2.5,1.2,2.3,3.7,4.4,3.4)
C<-c(50,43,59,46,46,62,37,52,41,54,66,61,58,54,60)
plot(B,C)
plot(B,C)
X<-c(4,2,1,3)
Y<-c(4,5,7,4)
plot(X,Y)
b=cov(X,Y)/var(X)
a=(b*sum(X)-sum(y))/4
a=(b*sum(X)-sum(Y))/4
a=(sum(Y)-b*sum(X))/4
set.seed(123)
x2bar <- replicate(1000, mean(rpois(2, lambda=8)))
x5bar <- replicate(1000, mean(rpois(5, lambda=8)))
x50bar <- replicate(1000, mean(rpois(50, lambda=8)))
hist(x2bar, breaks=20, xlim=c(2, 14))
mean(x2bar)
sd(x2bar)
sd(x5bar)
sqrt(mean(x2bar))
round(sqrt(x2bar), 2)
round(sqrt(mean(x2bar)), 2)
round(sqrt(mean(x5bar)), 2)
round(sqrt(mean(x50bar)), 2)
sd(x50bar)
round(sqrt(8)/sqrt(2), 2)
round(sqrt(8)/sqrt(5), 2)
round(sqrt(8)/sqrt(50), 2)
mean(x2bar)
round(mean(x2bar))
round(mean(x2bar), 2)
round(sd(x2bar), 2)
round(mean(x5bar), 2)
round(sd(x5bar), 2)
round(mean(x50bar), 2)
round(sd(x50bar),2)
?dpois
dpois(10, lambda=8)
round(dpoois(10, lambda=8),2)
round(dpois(10, lambda=8),2)
round(ppois(11, lambda=8),2)
sqrt(0.125)/sqrt(50)
set.seed(123)
y2bar <- replicate(1000, mean(rexp(2, rate=8)))
y5bar <- replicate(1000, mean(rexp(5, rate=8)))
y50bar <- replicate(1000, mean(rexp(50, rate=8)))
round(mean(y2bar),3)
round(sd(y2bar), 3)
round(mean(y5bar),3)
round(sd(y5bar),3)
round(mean(y50bar),3)
round(sd(y50bar),3)
s1 <- "hi"
s2 <- 'hi'
s3 <- '"hello"'
install.packages('stringr')
library(stringr)
puppies <- 3
cost <- 1000
total_cost <- 3000
major <- informatics
major <- 'informatics'
?paste
phrase <- paste("My major is ", major)
classes <- c('art h 342', 'info 498', 'amath 383')
num_classes <- length(classes)
favorite_class <- classes(2)
favorite_class <- classes[2]
hours_per_week <- 30
hard_week <- hours_per_week * 1.5
?seq
seq(100:199)
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
seq(100, 199)
nums <- seq(100, 199)
first_ten <- nums(1:10)
first_ten <- nums[1:10]
first_ten
?max
library(RCurl)
x <- getURL('https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv')
dataset <- read.csv(text = x)
rest$max_countries <- max(dataset$How.many.countries.have.you.visited.in.your.life., na.rm=FALSE)
rest$max_countries <- max(dataset$How.many.countries.have.you.visited.in.your.life., na.rm=TRUE)
ret$max_countries <- max(dataset$How.many.countries.have.you.visited.in.your.life., na.rm=TRUE)
info_function <- function(dataset) {
ret <- list()
#How many questions the survey asked
ret$length <- length(dataset)
#The number of people who answered
ret$num_people <- nrow(dataset)
#average number of countries people have traveled to
ret$average_countries <- mean(dataset$How.many.countries.have.you.visited.in.your.life)
#number of people interested in Informatics
ret$info_majors <-nrow(filter(dataset, Are.you.interested.in.applying.to.the.Informatics.major. %in% 'Yes'))
#number of people not interested or not sure about Informatics
ret$not_info_majors <- ret$num_people - ret$info_majors
#number of dog people and cat people
ret$dog <-nrow(filter(dataset, Do.you.consider.yourself. %in% c('A dog person...', 'Both!')))
ret$cat <-nrow(filter(dataset, Do.you.consider.yourself. %in% c('A cat person....', 'Both!')))
#highest number of countries visited
ret$max_countries <- max(dataset$How.many.countries.have.you.visited.in.your.life., na.rm=TRUE)
return (ret)
}
View(dataset)
View(dataset)
info_function <- function(dataset) {
ret <- list()
#How many questions the survey asked
ret$length <- length(dataset)
#The number of people who answered
ret$num_people <- nrow(dataset)
#average number of countries people have traveled to
ret$average_countries <- mean(dataset$How.many.countries.have.you.visited.in.your.life)
#number of people interested in Informatics
ret$info_majors <-nrow(filter(dataset, Are.you.interested.in.applying.to.the.Informatics.major. %in% 'Yes'))
#number of people not interested or not sure about Informatics
ret$not_info_majors <- ret$num_people - ret$info_majors
#number of dog people and cat people
ret$dog <-nrow(filter(dataset, Do.you.consider.yourself. %in% c('A dog person...', 'Both!')))
ret$cat <-nrow(filter(dataset, Do.you.consider.yourself. %in% c('A cat person....', 'Both!')))
ret$neither <- nrow(filter(dataset, Do.you.consider.yourself. %in% 'Neither'))
#highest number of countries visited
ret$max_countries <- max(dataset$How.many.countries.have.you.visited.in.your.life., na.rm=TRUE)
return (ret)
}
View(dataset)
?nrow
info_function <- function(dataset) {
ret <- list()
#most common operating system
x <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(What.operating.system.do.you.typically.use.)
)
ret$os <- x[sum == max(sum), 'What.operating.system.do.you.typically.use']
#class standings
ret$freshman <- nrow(filter(dataset, What.is.your.current.class.standing. %in% 'Freshman'))
ret$sophomore <- nrow(filter(dataset, What.is.your.current.class.standing. %in% 'Sophomore'))
ret$junior <- nrow(filter(dataset, What.is.your.current.class.standing. %in% 'Junior'))
ret$senior <- nrow(filter(dataset, What.is.your.current.class.standing. %in% 'Senior'))
#How many questions the survey asked
ret$length <- length(dataset)
#The number of people who answered
ret$num_people <- nrow(dataset)
#average number of countries people have traveled to
ret$average_countries <- mean(dataset$How.many.countries.have.you.visited.in.your.life)
#number of people interested in Informatics
ret$info_majors <-nrow(filter(dataset, Are.you.interested.in.applying.to.the.Informatics.major. %in% 'Yes'))
#number of people not interested or not sure about Informatics
ret$not_info_majors <- ret$num_people - ret$info_majors
#number of dog people and cat people
ret$dog <-nrow(filter(dataset, Do.you.consider.yourself. %in% c('A dog person...', 'Both!')))
ret$cat <-nrow(filter(dataset, Do.you.consider.yourself. %in% c('A cat person....', 'Both!')))
ret$neither <- nrow(filter(dataset, Do.you.consider.yourself. %in% 'Neither'))
#highest number of countries visited
ret$max_countries <- max(dataset$How.many.countries.have.you.visited.in.your.life., na.rm=TRUE)
return (ret)
}
x <- getURL('https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv')
dataset <- read.csv(text = x)
ret <- list()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(What.operating.system.do.you.typically.use.)
)
library(dplyr)
x <- getURL('https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv')
dataset <- read.csv(text = x)
ret <- list()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(What.operating.system.do.you.typically.use.)
)
?nrow
library(dplyr)
x <- getURL('https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv')
dataset <- read.csv(text = x)
ret <- list()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = sum(What.operating.system.do.you.typically.use.)
)
dataset <- read.csv(text = x, stringsAsFactors=FALSE)
ret <- list()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = sum(What.operating.system.do.you.typically.use.)
)
sum = nrow(What.operating.system.do.you.typically.use.)
sum = nrow()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow()
)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(y)
)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(What.operating.system.do.you.typically.use)
)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(What.operating.system.do.you.typically.use.)
)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(as.vector(What.operating.system.do.you.typically.use.))
)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(dataset$What.operating.system.do.you.typically.use.)
)
?nrow
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(What.operating.system.do.you.typically.use.)
)
dataset <- read.csv(text = x, stringsAsFactors=FALSE)
y <- group_by(dataset, What.operating.system.do.you.typically.use.)
View(y)
sum = nrow(What.operating.system.do.you.typically.use.)
sum = nrow(dataset$What.operating.system.do.you.typically.use.)
sum = nrow(dataset$What.operating.system.do.you.typically.use., na.rm = TRUE)
View(y)
View(dataset)
nrow(dataset$What.operating.system.do.you.typically.use.)
nrow(dataset)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(y)
)
ret$os <- y[sum == max(sum), 'What.operating.system.do.you.typically.use']
View(y)
sum = nrow()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = nrow(y$What.operating.system.do.you.typically.use.)
)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = sum(nrow(y))
)
View(y)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
sum = sum(nrow(What.operating.system.do.you.typically.use.))
)
View(y)
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
n = n()
)
View(y)
ret$os <- y[n == max(n), 'What.operating.system.do.you.typically.use']
ret$os <- y[n == max(n), 'What.operating.system.do.you.typically.use.']
y[n ==max(n),]
y[n = max(n)]
?max
y[n == max(n, na.rm = TRUE),]
View(y)
y[1,]
y[1,2]
y[1,1]
y[, 'What.operating.system.do.you.typically.use.']
max(y$n)
y[n==max(n)]
max(y$n)
y[n == max(y$n)]
y[n == which.max(y$n)]
?which.max
y[which.max(n),]
which.max(n)
which.max(y$n)
y[which.max(y$n), 'Which.operating.system.do.you.typically.use.']
y[which.max(y$n), y$Which.operating.system.do.you.typically.use.]
y[which.max(y$n), 1]
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
n = n()
)
ret$os <- y[which.max(y$n), 1]
ret <- list()
y <- group_by(dataset, What.operating.system.do.you.typically.use.) %>%
summarise(
n = n()
)
ret$os <- y[which.max(y$n), 1]
View(ret)
install.packages(ggmap)
install.packages('ggmap')
library(ggmap)
qmap('Seattle')
`r qmap('Seattle')`
library(shiny)
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds")
textInput('text', label = h4('add a comment link here'), value = 'enter text'),
actionButton("render", "Generate a word cloud")
))
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
textInput('text', label = h4('add a comment link here'), value = 'enter text'),
actionButton("render", "Generate a word cloud")
plotOutput("plot")
))
shinyUI(fluidPage(
titlePanel("Reddit comment word clouds"),
textInput('text', label = h4('add a comment link here'), value = 'enter text'),
actionButton("render", "Generate a word cloud"),
plotOutput("plot")
))
wordcould(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
shinyServer(function(input, output) {
createPlot <- eventReactive(input$render, {
runif(input$text != "enter text")
reddit_page <- read_html(input$text)
comments_text <- html_nodes(reddit_page, ".md p") %>% html_text()
wordcould(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
})
output$plot <- renderPlot({
createPlot()
})
wordcould(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
wordcould(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
wordcloudd(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
wordcloud(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
install.packages('rvest','wordcloud','tm')
install.packages('rvest')
install.packages('tm')
install.packages('wordcloud')
library(rvest)
library(wordcloud)
library(tm)
wordcloud(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
createPlot <- eventReactive(input$render, {
runif(input$text != "enter text")
reddit_page <- read_html(input$text)
comments_text <- html_nodes(reddit_page, ".md p") %>% html_text()
wordcloud(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
})
output$plot <- renderPlot({
createPlot()
})
shinyServer(function(input, output) {
createPlot <- eventReactive(input$render, {
runif(input$text != "enter text")
reddit_page <- read_html(input$text)
comments_text <- html_nodes(reddit_page, ".md p") %>% html_text()
wordcloud(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
})
output$plot <- renderPlot({
createPlot()
})
shinyServer(function(input, output) {
createPlot <- eventReactive(input$render, {
runif(input$text != "enter text")
reddit_page <- read_html(input$text)
comments_text <- html_nodes(reddit_page, ".md p") %>% html_text()
wordcloud(comments_text, scale = c(4, 0.5), colors=brewer.pal(8, "Dark2"), min.freq=5)
})
output$plot <- renderPlot({
createPlot()
})
)
shiny::runApp('Documents/UW classes/info498/lab-8')
shiny::runApp('Documents/UW classes/info498/lab-8')
qmap('Seattle')
library(ggmap)
qmap('Seattle')
library(streamR)
source("scripts/tags.R")
load("my_oauth.Rdata")
library(streamR)
load("my_oauth.Rdata")
filterStream(file.name="", track="realdonaldtrump", locations = c(-122.75,36.8,-121.75,37.8,-74,40,-73,41), language='en', timeout=30, oauth=my_oauth)
load("my_oauth.Rdata")
filterStream(file.name ='', track="Clinton", language = "en", timeout =10, oauth=my_oauth)
source("scripts/tags.R")
library(streamR)
source("scripts/tags.R")
source("/scripts/tags.R")
setwd("~/Documents/UW classes/info498/INFO498_final_project")
source("scripts/tags.R")
load("my_oauth.Rdata")
collect_tweets <- function(tags) {
filterStream(file.name = "tweets.json",
track = tags,
language = "en",
timeout = 10,
oauth = my_oauth)
tweets_df <- parseTweets("tweets.json", simplify = FALSE)
return(tweets_df)
}
collect_tweets("Clinton")
filterStream(file.name = "tweets.json",
track = "Clinton",
language = "en",
timeout = 10,
oauth = my_oauth)
filterStream(file.name="", track="Clinton", language="en", locations=c(-122.75,36.8,-121.75,37.8), timeout=10, oauth=my_oauth)
getwe()
getwd()
library(devtools)
library(plotly)
library(twitteR)
setup_twitter_oauth(my_oauth$consumerKey, my_oauth$consumerSecret, my_oauth$oauthKey,
my_oauth$oauthSecret)
tweets = searchTwitter("election+us+2016",n=50, geocode="38,-95,2000mi", retryOnRateLimit=0)
tweets.df = do.call("rbind",lapply(tweets,as.data.frame))
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
tweets.df$q <- with(tweets.df, cut(created, 4))
plot_ly(tweets.df, lat=latitude, lon=longitude, text=text, mode='markers', marker =
list(size = 7, symbol = 'circle'), color=q, type="scattergeo",
locationmode='USA-states')%>%layout(geo=g)
library(ggmap)
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() +   mapWorld
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() +   mapWorld
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
install.packages('maptools')
library(maptools)
library(maps)
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() +   mapWorld
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
visited <- c("Seattle", "New York", "London")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() +   mapWorld
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
